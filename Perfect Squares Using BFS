class Solution {
    public int numSquares(int n) {
         int level = 0;
    int sq =(int)Math.sqrt(n);

    Queue<Integer> q=new LinkedList<Integer>();
    q.offer(n);

    while (!q.isEmpty()) {
      level++;
      int size = q.size();
      for (int i = 0; i < size; i++) {
        int curr = q.peek();
        q.poll();
        for (int k = sq; k >= 1; k--) {
           
          int m = k * k;
          if (curr == m)
            return level;
          else if (curr > m){
            q.offer(curr - m);
          }
        }
      }
    }
         return level;
    }
}

/** leetcode: https://leetcode.com/explore/learn/card/queue-stack/231/practical-application-queue/1371/

Given an integer n, return the least number of perfect square numbers that sum to n.

A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.

 

Example 1:

Input: n = 12
Output: 3
Explanation: 12 = 4 + 4 + 4.
Example 2:

Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.


**/
